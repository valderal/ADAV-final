knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(grid)
library(gridExtra)
# setting seed for easy duplication
set.seed(48645156)
# importing the dataset from the \data folder
pokemon <- read_csv("data/pokemon_sort.csv")
data.frame(head(pokemon, 3))
# removing unused columns
pokemon <- select(pokemon, -c("japanese_name", "abilities", "classfication",
"attack":"speed", "percentage_male"))
# check if column are the correct class
sapply(pokemon, class)
pokemon$capture_rate <- as.numeric(pokemon$capture_rate)
# NA introduced to coercion, so searching for it and correcting it
item_count <- 1
for (item in pokemon$capture_rate) {
if (is.na(item) == TRUE) {
print(pokemon[item_count, ])
item_count <- item_count + 1
} else {
item_count <- item_count + 1
}
}
# minior has two forms that it switches to if it falls below 50% HP, so the new
# capture rate value will be the average of the two forms
pokemon[774, "capture_rate"] <- (30+255)/2
# add dummy variables for each type
all_values <- c("poison", "flying", "dark", "electric", "ice", "ground", "fairy",
"grass", "fighting", "psychic", "steel", "fire", "rock", "water",
"dragon", "ghost", "bug", "normal")
# Create new columns for each value and fill with 1 or 0 based on type1 and type2
for (val in all_values) {
pokemon <- pokemon %>%
mutate(!!val := as.numeric(type1 == val | type2 == val))
}
# search for NA's and see if they need to be replaced or not
column_list <- colnames(pokemon)
item_count <- 1
for (col in column_list) {
if (sum(is.na(pokemon[item_count])) == 0) {
item_count <- item_count + 1
} else {
cat(col, ":\n", sum(is.na(pokemon[item_count])), "\n")
item_count <- item_count + 1
}
}
# changing type2 NA's to be none, and adding pokemon to single_type dummy
pokemon$single_type <- 0
item_count <- 1
for (item in pokemon$type2) {
if (is.na(item) == TRUE) {
pokemon[item_count, "type2"] <- "none"
pokemon[item_count, "single_type"] <- 1
item_count <- item_count + 1
} else {
item_count <- item_count + 1
}
}
# changing the NA's for height and weight to be filled with column mean
# Function to fill NaN values with column mean
fill_na_with_mean <- function(df, column) {
df %>%
mutate(!!sym(column) := ifelse(is.na(!!sym(column)), mean(!!sym(column),
na.rm = TRUE),
!!sym(column)))
}
# Columns to fill NaN values
columns_to_fill <- c("height_m", "weight_kg")
# Fill NaN values for each specified column
for (col in columns_to_fill) {
pokemon <- fill_na_with_mean(pokemon, col)
}
# the pokemon types have a certain color that has to be attached to it.
# this will be done by writing a feature that will attach the applicable hex
# color to the type name
colors <- c("normal" = "#A8A77A",
"fire"= "#EE8130",
"water"= "#6390F0",
"electric"= "#F7D02C",
"grass"= "#7AC74C",
"ice"="#96D9D6",
"fighting"= "#C22E28",
"poison"= "#A33EA1",
"ground"= "#E2BF65",
"flying"= "#A98FF3",
"psychic"= "#F95587",
"bug"= "#A6B91A",
"rock"= "#B6A136",
"ghost"= "#735797",
"dragon"= "#6F35FC",
"dark"= "#705746",
"steel"= "#B7B7CE",
"fairy"= "#D685AD")
# In order to compare the base total for each type it needs to be taken into
# account that pokemon can have two types. for this reason it was decided to
# duplicate the pokemon that have two types that it can be assigned to both
# types in the plot that will be made. This is done by filtering the pokemon
# that do not have NA. These filtered pokemon will then have type2 as the new
#type 1 and will then be binded with the original dataframe.
pokemon_with_type2 <- pokemon %>%
filter(!is.na(type2))
pokemon_with_dups <- pokemon_with_type2 %>%
mutate(type1 = type2) %>%
bind_rows(pokemon_with_type2)
pokemon_with_dups <- bind_rows(pokemon, pokemon_with_dups)
# this code is used to order the types according to the mean base total per type.
# This will order the types for the ggplot that will be made that will compare
# the base total per type.
pokemon_with_dups$type1 <- factor(pokemon_with_dups$type1,
levels = names(sort(tapply(pokemon_with_dups$base_total,
pokemon_with_dups$type1, mean),
decreasing = TRUE)))
# this code is used to make a violin plot. this will show the distribution per
# type of pokemon based on thier base total.
violin_plot2 <- ggplot(pokemon_with_dups, aes(x = type1,
y = base_total,
fill = type1)) +
geom_violin() +
labs(
title = "Violin plot of base total stats per type ordered by the mean base
total of the pokemon for the type",
x = "Types",
y = "Base Total",
fill = colors,
caption = "Source:"
) +
scale_fill_manual(
values = colors) + theme_minimal()
violin_plot2
# bar plot showing the distribution of each type (both main and secondary) per
# generation
gen_levels <- c("7", "6", "5", "4", "3", "2", "1")
type2_levels <- c("bug", "dark", "dragon", "electric", "fairy", "fighting",
"fire", "flying", "ghost", "grass", "ground", "ice", "normal",
"poison", "psychic", "rock", "steel", "water", "none")
plot_type1 <- ggplot(
pokemon,
mapping = aes(x = type1,
fill = factor(generation, levels = gen_levels))
) +
geom_bar(stat = "count") +
scale_fill_viridis_d() +
labs(subtitle = "Distribution for main type",
x = "Type",
y = "Count",
fill = "Generation") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
plot_type2 <- ggplot(pokemon,
mapping = aes(x = factor(type2, levels = type2_levels),
fill = factor(generation, levels = gen_levels))
) +
geom_bar(stat = "count") +
scale_fill_viridis_d() +
labs(subtitle = "Distribution for secondary type",
x = "Type",
y = "Count",
fill = "Generation") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
grid.arrange(plot_type1, plot_type2, ncol = 2,
top = textGrob("Pokemon type per generation",
gp=gpar(fontsize=15,font=3)))
#delete numaric columns
numeric_pokemon <- pokemon[sapply(pokemon, is.numeric)]
# Calculate the correlation matrix
correlation_matrix <- cor(numeric_pokemon)
# Extract the 'base total' column
base_total_corr <- correlation_matrix[, "base_total"]
# Remove 'base total' self-correlation if present
base_total_corr <- base_total_corr[names(base_total_corr) != "base_total"]
# Sort the correlations
sorted_corr <- sort(base_total_corr, decreasing = TRUE)
# Load necessary library
library(ggplot2)
# Convert to data frame for ggplot
corr <- data.frame(Parameter = names(sorted_corr), Correlation = sorted_corr)
# Add a column for color classification
corr$Highlight <- "Normal"
corr$Highlight[1:5] <- "Top 5"      # Top 5 correlations
corr$Highlight[(nrow(corr)-4):nrow(corr)] <- "Bottom 5"  # Bottom 5 correlations
# Create a custom color palette
custom_colors <- c("Top 5" = "dodgerblue", "Bottom 5" = "firebrick",
"Normal" = "grey70")
# Create bar plot
ggplot(corr, aes(x = reorder(Parameter, Correlation), y = Correlation,
fill = Highlight)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = custom_colors) +
coord_flip() +
labs(title = "Correlation with 'Base Total'", x = "Parameter",
y = "Correlation") +
theme_minimal() +
theme(legend.title = element_blank())
# df dataframe with all the useless columns out to create good datasets
df <- select(pokemon, -c("name", "pokedex_number", "type1", "type2",
"against_bug":"against_water"))
# define the training partition
train_index <- createDataPartition(df$base_total, p = .5,
list = FALSE,
times = 1)
# split the data using the training partition to obtain training data
pokemon_train <- df[train_index,]
# remainder of the split is the validation and test data (still) combined
pokemon_val_and_test <- df[-train_index,]
# split the remaining 50% of the data in a validation and test set
val_index <- createDataPartition(pokemon_val_and_test$base_total, p = .6,
list = FALSE,
times = 1)
pokemon_valid <- pokemon_val_and_test[val_index,]
pokemon_test  <- pokemon_val_and_test[-val_index,]
# MSE function from lab 3
mse <- function(y_true, y_pred) {
mean((y_true - y_pred)^2)
}
# MSE on a validation dataset for predictions from a linear model function from
# lab 4
lm_mse <- function(formula, train_data, valid_data) {
y_name <- as.character(formula)[2]
y_true <- valid_data[[y_name]]
lm_fit <- lm(formula, train_data)
y_pred <- predict(lm_fit, newdata = valid_data)
mean((y_true - y_pred)^2)
}
# sourcing the generate formulas function from lab 4
source("generate_formulas.R")
# object with all potential predictor variables
x_vars <- colnames(select(df, -base_total))
# function to find the best model for x amount of predictors, using code from
# lab 4
best_n_preds <- function(n) {
formulas <- generate_formulas(p = n, x_vars = x_vars, y_var = "base_total")
amount <- length(formulas)
mses <- rep(0, amount)
for (i in 1:amount) {
mses[i] <- lm_mse(as.formula(formulas[i]), pokemon_train, pokemon_valid)
}
best_preds <- formulas[which.min(mses)]
min_mse <- lm_mse(as.formula(best_preds), pokemon_train, pokemon_valid)
cat(best_preds, "| MSE", min_mse)
}
# find the best models for 1 to 5 predictors
# time to compute on high-end pc: ~3 minutes (as point of reference for how long
# this will take, especially with laptops this can and will take longer)
for (bip in 1:5) {
cat(bip, "predictor(s):\n")
best_n_preds(bip)
cat("\n")
}
# trying 5 predictor model
mse_5_pred <-lm_mse(base_total ~ generation + is_legendary + height_m +
capture_rate + single_type, pokemon_train, pokemon_valid)
summary(lm(as.formula(base_total ~ generation + is_legendary + height_m +
capture_rate + single_type), data = pokemon_train))
# trying 3 predictor model
summary(lm(base_total ~ is_legendary + height_m + capture_rate,
data = pokemon_train))
# saving values of final 3 predictor model
formula_3_pred <- base_total ~ is_legendary + height_m + capture_rate
mse_3_pred <- lm_mse(as.formula(formula_3_pred), pokemon_train, pokemon_valid)
# training model on train and validation seperately
model_train <- lm(as.formula(formula_3_pred), data = pokemon_train)
(model_train_mse <- mse(y_true = pokemon_train$base_total,
y_pred = predict(model_train)))
model_valid_mse <- mse(y_true = pokemon_valid$base_total,
y_pred = predict(object = model_train,
newdata = pokemon_valid))
cat("Estimated out-of-sample MSE:", model_valid_mse)
# retraining model
model_2 <- lm(as.formula(formula_3_pred),
data = bind_rows(pokemon_train, pokemon_valid))
summary(model_2)
model_2_mse_test <- mse(y_true = pokemon_test$base_total,
y_pred = predict(model_2, newdata = pokemon_test))
model_2_mse_test
shiny::runApp('Analysis')
runApp('Analysis')
# data prepping ----
# import Pokemon dataset
pokemon <- pokemon <- read_csv("data/pokemon_sort.csv")
runApp('Analysis')
runApp('Analysis')
runApp('Analysis')
runApp('Analysis')
# importing the dataset from the \data folder
pokemon <- read_csv("data/pokemon_sort.csv")
View(pokemon)
# setting seed for easy duplication
set.seed(48645156)
# importing the dataset from the \data folder
pokemon <- read_csv("data/pokemon_sort.csv")
data.frame(head(pokemon, 3))
# removing unused columns
pokemon <- select(pokemon, -c("japanese_name", "abilities", "classfication",
"attack":"speed", "percentage_male"))
# check if column are the correct class
sapply(pokemon, class)
pokemon$capture_rate <- as.numeric(pokemon$capture_rate)
# NA introduced to coercion, so searching for it and correcting it
item_count <- 1
for (item in pokemon$capture_rate) {
if (is.na(item) == TRUE) {
print(pokemon[item_count, ])
item_count <- item_count + 1
} else {
item_count <- item_count + 1
}
}
# minior has two forms that it switches to if it falls below 50% HP, so the new
# capture rate value will be the average of the two forms
pokemon[774, "capture_rate"] <- (30+255)/2
# add dummy variables for each type
all_values <- c("poison", "flying", "dark", "electric", "ice", "ground", "fairy",
"grass", "fighting", "psychic", "steel", "fire", "rock", "water",
"dragon", "ghost", "bug", "normal")
# Create new columns for each value and fill with 1 or 0 based on type1 and type2
for (val in all_values) {
pokemon <- pokemon %>%
mutate(!!val := as.numeric(type1 == val | type2 == val))
}
# search for NA's and see if they need to be replaced or not
column_list <- colnames(pokemon)
item_count <- 1
for (col in column_list) {
if (sum(is.na(pokemon[item_count])) == 0) {
item_count <- item_count + 1
} else {
cat(col, ":\n", sum(is.na(pokemon[item_count])), "\n")
item_count <- item_count + 1
}
}
# changing type2 NA's to be none, and adding pokemon to single_type dummy
pokemon$single_type <- 0
item_count <- 1
for (item in pokemon$type2) {
if (is.na(item) == TRUE) {
pokemon[item_count, "type2"] <- "none"
pokemon[item_count, "single_type"] <- 1
item_count <- item_count + 1
} else {
item_count <- item_count + 1
}
}
# changing the NA's for height and weight to be filled with column mean
# Function to fill NaN values with column mean
fill_na_with_mean <- function(df, column) {
df %>%
mutate(!!sym(column) := ifelse(is.na(!!sym(column)), mean(!!sym(column),
na.rm = TRUE),
!!sym(column)))
}
# Columns to fill NaN values
columns_to_fill <- c("height_m", "weight_kg")
# Fill NaN values for each specified column
for (col in columns_to_fill) {
pokemon <- fill_na_with_mean(pokemon, col)
}
View(pokemon)
runApp('Analysis')
runApp('Analysis')
runApp('Analysis')
model <- lm(base_total~is_legendary+height_m+capture_rate, data=pokemon)
model <- lm(base_total~is_legendary+height_m+capture_rate, data=pokemon)
model.lin <- lm(base_total ~ capture_rate, data = pokemon)
model.sq <- lm(base_total ~ capture_rate + I(capture_rate^2), data=pokemon)
model.cub <- lm(base_total ~ capture_rate + I(capture_rate^2) + I(capture_rate^3), data=pokemon)
runApp('Analysis')
runApp('Analysis')
